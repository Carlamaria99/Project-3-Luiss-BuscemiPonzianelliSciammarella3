DOCUMENTATION FIRST TASKThe topic selected by the group is represented by project number 3 concerning OMDb API (the open movie database). It, as the expression just reported suggests, is a free web service used to obtain information on the various films thanks to the contents and images provided directly by users and to the ratings of Rotten Tomatoes (the latter are the most reliable measurements of the entertainment of quality). Opening a little parenthesis on the developer network just mentioned, it designates the best reviewed movies and TV shows as Certified Fresh, and that award is given to movies and TV shows with a Tomatometer rating of 75% and higher, based on a minimum number of reviews required. From here you can see the ways in which this API operates, i.e. the conduct of a search for data from IMDb (Internet Movie Database) using HTTP methods and also the return of data in JSON or XML. The resulting search that can be conducted through this tool can be done by title, IMDb identifier, release date, season or episode. In addition, for paid users, the Poster API is also available which, as the term suggests, makes more than 280,000 posters usable at a high resolution (2000 x 3000).After the presentation of the main topic on which the following study is based, it is possible to directly access this database by obtaining your API key for free which must be entered in the code that will be presented and explained later to obtain the dataset consisting of the required observations.# Inside the codification it is possible to view the first code to be entered into the Python programming language to obtain the first dataframe consisting of all the titles (of the films and TV series regardless of their year of publication) contained within the OMDb API, or 8 million lines. The import and reading of the Pandas library shown below is in fact necessary for the manipulation of the various boxes in order to then carry out the classification requested by us (which will subsequently be carried out by film and by year of release) to reduce the number of observations.Subsequently it was possible to identify a new dataset (subset of the previous one) containing only the titles of the films. To achieve this, it is necessary to manipulate the first dataframe to filter and extract the category requested by us which resulted in a decrease in rows from 8 million to 529 thousand. As can be seen from the following code, a second classification was made to reduce the range we studied based on the year of release of the various film productions, in this specific case the year 1999.The last lines of the code show the creation and display of the reduced data frame based on the filters set by us for the classification and reduction of the number of observations. This was made possible by the reading of the CSV file that allows you to work with large amounts of data thanks to its graphic simplification that allows you to view the content requested by us in printouts.
We then created a function able to call the APIs and conduct different queries for each and every one IMDB id corresponding to each movie in our df (1999 movies).
we put multiple API keys as the limit for the OMDB api is 1000 queries/day per api and then we appended every response into a list, converted the list into a pandas df and finally created a csv file with the whole dataset